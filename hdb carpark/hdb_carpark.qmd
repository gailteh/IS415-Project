---
title: "hdb_carpark"
date: "27 Mar 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

## Import packages

```{r}
pacman::p_load(maptools, sf, raster, spatstat, tmap, dplyr, tidyverse)
```

## Import geo-SG

```{r}
sg_sf <- st_read(dsn = "data/coastal_outline", layer="CostalOutline")
```

```{r}
mpsz_sf <- st_read(dsn = "data/mpsz", 
                layer = "MPSZ-2019")
```

### Exclude the islands!!

#### for the mpsz data!!

```{r}
unique(mpsz_sf$PLN_AREA_N)
```

```{r}
mpsz_sf <- filter(mpsz_sf, PLN_AREA_N != "WESTERN ISLANDS")
mpsz_sf <- filter(mpsz_sf, PLN_AREA_N != "NORTH-EASTERN ISLANDS")
mpsz_sf <- filter(mpsz_sf, PLN_AREA_N != "SOUTHERN ISLANDS")
```

#### FOR THE COASTAL DATA

```{r}
unique(sg_sf$COSTAL_NAM)
```

```{r}
#filter rows that contain the string 'PULAU' in the COSTAL_NAM column
sg_sf <- sg_sf |> 
  filter(!grepl('PULAU', COSTAL_NAM))
```

## Import carpark data

```{r}
carpark <- read_csv("data/hdb-carpark-information.csv")
```

```{r}
glimpse(carpark)
```

```{r}
st_crs(carpark)
```

```{r}

carpark_sf <- st_as_sf(carpark, coords = c("x_coord", "y_coord"), crs=4326)

carpark_sf <- st_set_crs(carpark_sf, 3414)
carpark_sf

```

## Spatial wrangling

### Convert sf into sp's spatial class

```{r}
carpark <- as_Spatial(carpark_sf)
sg <- as_Spatial(sg_sf)
mpsz <- as_Spatial(mpsz_sf)
```

### Converting the Spatial\* class into generic sp format

```{r}
carpark_sp <- as(carpark, "SpatialPoints")
carpark_sp
```

```{r}
sg_sp <- as(sg, "SpatialPolygons")
sg_sp
```

### Converting the generic sp format into spatstat's ppp format

```{r}
carpark_ppp <- as(carpark_sp, "ppp")
carpark_ppp
```

### Handling duplicated points

```{r}
any(duplicated(carpark_ppp))
```

## Plot

```{r}
tmap_mode('view')
tm_shape(carpark) +
  tm_dots(alpha=0.4, 
          size=0.05)
```

## carpark_ppp_jit

```{r}
carpark_ppp_jit <- rjitter(carpark_ppp, retry=TRUE, nsim=1, drop=TRUE)
```

## write to rds

```{r}
#carpark
write_rds(carpark_sf, "data/rds/carpark_sf.rds")
write_rds(carpark_sp, "data/rds/carpark_sp.rds")
write_rds(carpark_ppp, "data/rds/carpark_ppp.rds")
write_rds(carpark, "data/rds/carpark.rds")
```

## Owin object

```{r}
sg_owin <- as(sg_sp, "owin")
```

```{r}
plot(sg_owin)
```

### First-order Spatial Point Patterns Analysis

#### Kernel Density Estimation (KDE)

```{r}
kde_carpark.bw <- density(carpark_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
```

```{r}
plot(kde_carpark_bw, sigma=0.6)
```

##### Retrieve bandwidth

```{r}
bw <- bw.diggle(carpark_ppp)
bw
```

#### Rescaling KDE values

```{r}
carpark_ppp.km <- rescale(carpark_ppp, 1000, "km")

write_rds(carpark, "data/rds/carpark_ppp.km.rds")
```

#### Working with different automatic bandwidth methods

```{r}
 bw.CvL(carpark_ppp.km)
```

```{r}
bw.scott(carpark_ppp.km)
```

```{r}
bw.ppl(carpark_ppp.km)
```

```{r}
bw.diggle(carpark_ppp.km)
```

```{r}
kde_carpark.ppl <- density(carpark_ppp.km, 
                               sigma=bw.ppl, 
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2))

plot(kde_carpark.bw, main = "bw.diggle")
plot(kde_carpark.ppl, main = "bw.ppl")
```

#### Working with different kernel methods

```{r}
par(mfrow=c(2,2))
plot(density(carpark_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(carpark_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(carpark_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(carpark_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```

#### Fixed and adaptive KDE

##### Computing KDE by fixed bandwidth

```{r}
kde_carpark_600 <- density(carpark_ppp.km, sigma=0.6, edge=TRUE, kernel="gaussian")
plot(kde_carpark_600)
```

##### Computing KDE by adaptive bandwidth

```{r}
kde_carpark_adaptive <- adaptive.density(carpark_ppp.km, method="kernel")
plot(kde_carpark_adaptive)
```

#### Converting KDE output into grid object

```{r}
gridded_kde_carpark_bw <- as.SpatialGridDataFrame.im(kde_carpark.bw)
spplot(gridded_kde_carpark_bw)
```

##### Convering gridded output into raster

```{r}
kde_carpark_bw_raster <- raster(gridded_kde_carpark_bw)
```

```{r}
kde_carpark_bw_raster
```

#### Assigning projection systems

```{r}
projection(kde_carpark_bw_raster) <- CRS("+init=EPSG:3414")
kde_carpark_bw_raster
```

```{r}
tm_shape(kde_carpark_bw_raster) + 
  tm_raster("v") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```
