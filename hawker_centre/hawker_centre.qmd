---
title: "Hawker_Centres"
date: "27 Mar 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

## Import packages

```{r}
pacman::p_load(maptools, sf, raster, spatstat, tmap, dplyr, readr, stringr, sfdep)
```

## Import geo-SG

```{r}
sg_sf <- st_read(dsn = "data/coastal_outline", layer="CostalOutline") |>
  st_transform(3414)
```

```{r}
mpsz_sf <- st_read(dsn = "data/mpsz", layer = "MPSZ-2019")
```

```{r}
mpsz_sf <- st_transform(mpsz_sf, 3414)
st_crs(mpsz_sf)
```



### Exclude the islands!!

#### for the mpsz data!!

```{r}
unique(mpsz_sf$PLN_AREA_N)
```

```{r}
mpsz_sf <- filter(mpsz_sf, PLN_AREA_N != "WESTERN ISLANDS")
mpsz_sf <- filter(mpsz_sf, PLN_AREA_N != "NORTH-EASTERN ISLANDS")
mpsz_sf <- filter(mpsz_sf, PLN_AREA_N != "SOUTHERN ISLANDS")
```

#### FOR THE COASTAL DATA

```{r}
unique(sg_sf$COSTAL_NAM)
```

```{r}
#filter rows that contain the string 'PULAU' in the COSTAL_NAM column
sg_sf <- sg_sf |> 
  filter(!grepl('PULAU', COSTAL_NAM))
```


```{r}
#filter rows that contain the string 'PULAU' in the COSTAL_NAM column
sg_sf <- sg_sf |> 
  filter(!grepl('JURONG', COSTAL_NAM))
```





## Import hawker data

```{r}
hawker_sf <- st_read("data/hawker-centres/hawker-centres-geojson.geojson") |>
  st_transform(3414)
```

```{r}
glimpse(hawker_sf)
```

```{r}
length(which(st_is_valid(hawker_sf) == FALSE))
```



## extract the names of the hawkers
```{r}

# Assuming your data frame is named 'df' and the column containing the HTML string is named 'html'

# Define a regular expression pattern to match the desired data
pattern <- "<th>NAME<\\/th>\\s*<td>(.*?)<\\/td>"

# Extract the data using the pattern and str_extract function from the stringr package
library(stringr)
hawker_sf$Name <- str_extract(hawker_sf$Description, pattern)

# Remove the HTML tags from the extracted data using gsub function
hawker_sf$Name <- gsub("<.*?>", "", hawker_sf$Name)

# Remove the first word (aka NAME)
hawker_sf$Name <- sub("^[^[:space:]]+\\s", "", hawker_sf$Name)


```

## remove the description column
```{r}
hawker_sf <- hawker_sf[, -2]
```


## drop z geometry 
```{r}
hawker_sf$geometry <- st_zm(hawker_sf$geometry)
```



## Spatial wrangling

### Convert sf into sp's spatial class

```{r}
hawker <- as_Spatial(hawker_sf)
sg <- as_Spatial(sg_sf)
mpsz <- as_Spatial(mpsz_sf)
```

### Converting the Spatial\* class into generic sp format

```{r}
hawker_sp <- as(hawker, "SpatialPoints")
hawker_sp
```

```{r}
sg_sp <- as(sg, "SpatialPolygons")
sg_sp
```

### Converting the generic sp format into spatstat's ppp format

```{r}
hawker_ppp <- as(hawker_sp, "ppp")
hawker_ppp
```

### Handling duplicated points

```{r}
any(duplicated(hawker_ppp))
```

## Plot

```{r}
tmap_mode('view')
tm_shape(hawker) +
  tm_dots(alpha=0.4, 
          size=0.05)
```

## hawker_ppp_jit
```{r}
hawker_ppp_jit <- rjitter(hawker_ppp, retry=TRUE, nsim=1, drop=TRUE)
```







## Owin object

```{r}
sg_owin <- as(sg_sp, "owin")
```

```{r}
plot(sg_owin)
```

## Hawker & sg_owin
```{r}
hawkerSG_ppp = hawker_ppp[sg_owin]
plot(hawkerSG_ppp)
```

## rds file
```{r}
#hawker
write_rds(hawker_sf, "data/rds/hawker_sf.rds")
write_rds(hawker_sp, "data/rds/hawker_sp.rds")
write_rds(hawker_ppp, "data/rds/hawker_ppp.rds")
write_rds(hawker, "data/rds/hawker.rds")

#sg (coastal outline)
write_rds(sg_owin, "data/rds/sg_owin.rds")
write_rds(sg, "data/rds/sg.rds")
write_rds(sg_sf, "data/rds/sg_sf.rds")
write_rds(sg_sp, "data/rds/sg_sp.rds")

#mpsz
write_rds(mpsz, "data/rds/mpsz.rds")
write_rds(mpsz_sf, "data/rds/mpsz_sf.rds")
```


```{r}
unique(mpsz_sf$PLN_AREA_N)
```



# Study area

allow users to select filter down which areas they wanna see

```{r}
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
tm = mpsz[mpsz@data$PLN_AREA_N == "TAMPINES",]
ck = mpsz[mpsz@data$PLN_AREA_N == "CHOA CHU KANG",]
jw = mpsz[mpsz@data$PLN_AREA_N == "JURONG WEST",]


central = mpsz[mpsz$REGION_N == "CENTRAL REGION",]
west = mpsz[mpsz$REGION_N == "WEST REGION",]
east = mpsz[mpsz$REGION_N == "EAST REGION",]
north = mpsz[mpsz$REGION_N == "NORTH REGION",]
north_east = mpsz[mpsz$REGION_N == "NORTH-EAST REGION",]
```

### Plot

```{r}
par(mfrow=c(2,2))
plot(pg, main = "Punggol")
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")

plot(central, main = "Central Region")
```

From here, repeat steps using study areas, from convert from sf to sp, create owin objects for EACH study areas.

## Converting the spatial point data frame into generic sp format
```{r}
#| eval: false
pg_sp = as(pg, "SpatialPolygons")
tm_sp = as(tm, "SpatialPolygons")
ck_sp = as(ck, "SpatialPolygons")
jw_sp = as(jw, "SpatialPolygons")

central_sp = as(central, "SpatialPolygons")
```

```{r}
pg_sp
```


## Creating owin object
```{r}
#| eval: false
pg_owin = as(pg_sp, "owin")
tm_owin = as(tm_sp, "owin")
ck_owin = as(ck_sp, "owin")
jw_owin = as(jw_sp, "owin")

central_owin = as(central_sp, "owin")
```


## Combining childcare points and the study area
By using the code chunk below, we are able to extract childcare that is within the specific region to do our analysis later on.

```{r}
#| eval: false
hawker_pg_ppp = hawker_ppp_jit[pg_owin]
hawker_tm_ppp = hawker_ppp_jit[tm_owin]
hawker_ck_ppp = hawker_ppp_jit[ck_owin]
hawker_jw_ppp = hawker_ppp_jit[jw_owin]

hawker_central_ppp = hawker_ppp_jit[central_owin]
```



### Then, Combining childcare points and the study area

```{r}
#| eval: false
hawker_pg_ppp = hawker_ppp_jit[pg_owin]
hawker_tm_ppp = hawker_ppp_jit[tm_owin]
hawker_ck_ppp = hawker_ppp_jit[ck_owin]
hawker_jw_ppp = hawker_ppp_jit[jw_owin]

hawker_central_ppp = hawker_ppp_jit[central_owin]
```

Next, *rescale()* function is used to trasnform the unit of measurement from metre to kilometre.

```{r}
#| eval: false
hawker_pg_ppp.km = rescale(hawker_pg_ppp, 1000, "km")
hawker_tm_ppp.km = rescale(hawker_tm_ppp, 1000, "km")
hawker_ck_ppp.km = rescale(hawker_ck_ppp, 1000, "km")
hawker_jw_ppp.km = rescale(hawker_jw_ppp, 1000, "km")

hawker_central_ppp.km = rescale(hawker_central_ppp, 1000, "km")
```

Plot w the points

```{r}
#| eval: false
# par(mfrow=c(2,2))
# plot(hawker_pg_ppp.km, main="Punggol")
# plot(hawker_tm_ppp.km, main="Tampines")
# plot(hawker_ck_ppp.km, main="Choa Chu Kang")
# plot(hawker_jw_ppp.km, main="Jurong West")

plot(hawker_central_ppp.km, main="Central")
```



```{r}
# mpsz <- read_rds("data/rds/mpsz.rds")
# sg <- read_rds("data/rds/sg.rds")
# hawker <- read_rds("data/rds/hawker.rds")
```

```{r}
#| eval: false
# mpsz_hawker <- left_join(mpsz, carpark)
```


# tmap plot
```{r}
tm_shape(mpsz)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```



```{r}
tmap_mode("view")
tm_basemap("OpenStreetMap") +
tm_shape(mpsz_sf$REGION_N) +
  tm_polygons(
    border.col = "darkolivegreen"
  ) +
tm_shape(hawker)+ 
  tm_dots(size = 0.01,
          border.col = "black",
          border.lwd = 0.5) +
  
  tm_view(set.zoom.limits = c(11, 16))

```


```{r}
tmap_mode("view")

tm_shape(central_owin) +
  tm_polygons() +
  tm_shape(hawker_central_ppp.km) + 
  tm_view(set.zoom.limits = c(11, 16))

```




# LCLQ

```{r}
carpark_sf <- read_rds("data/rds/carpark_sf.rds")
hdb_sf <- read_rds("data/rds/hdb_sf.rds")
hawker_sf <- read_rds("data/rds/hawker_sf.rds")
sg <- read_rds("data/rds/sg.rds")
mall_sf <- read_rds("data/rds/mall_sf.rds")
```


## combine data into 1 df 
```{r}
hawker_lclq <- hawker_sf |>
  mutate(Name = "Hawker")

carpark_lclq <- carpark_sf |>
  dplyr::select(address, geometry) |>
  mutate(address = "Carpark") |>
  rename("Name" = "address")

hdb_lclq <- hdb_sf |>
  dplyr::select(address, geometry) |>
  mutate(address = "HDB") |>
  rename("Name" = "address")

mall_lclq <- mall_sf |>
  rename("Name" = "Mall Name")


# names(my_data_frame)[names(my_data_frame) == "old_column_name"] <- "new_column_name"
# 
# carpark_lclq <- carpark_lclq |>
#   rename(address = "Name")

interest_lclq <- rbind(hawker_lclq, carpark_lclq)
interest_lclq <- rbind(interest_lclq, hdb_lclq)
interest_lclq <- rbind(interest_lclq, mall_lclq)
```


## nearest neighbour = 6
```{r}
nb <- include_self(
  st_knn(st_geometry(interest_lclq), 6))
```

## Computing kernel weights

```{r}
wt <- st_kernel_weights(nb, 
                        interest_lclq, 
                        "gaussian", 
                        adaptive = TRUE)
```

## Preparing the vector list
```{r}
Carpark <- interest_lclq %>%
  filter(Name == "Carpark")
A <- interest_lclq$Name

Hawker <- interest_lclq %>%
  filter(Name == "Hawker")
B <- interest_lclq$Name

HDB <- interest_lclq %>%
  filter(Name == "HDB")
C <- interest_lclq$Name

Mall <- interest_lclq %>%
  filter(Name == "Shopping Mall")
C <- interest_lclq$Name
```


## Computing LCLQ
```{r}
LCLQ <- local_colocation(A, B, nb, wt, 49)

# LCLQ <- local_colocation(A, C, nb, wt, 49)

# LCLQ <- local_colocation(A, D, nb, wt, 49)
```

## Joining output table
```{r}
LCLQ_hawker <- cbind(interest_lclq, LCLQ)
```


## Plotting LCLQ values
```{r}


tmap_mode("view")
tm_shape(sg) +
  tm_polygons() +
tm_shape(LCLQ_hawker)+ 
  tm_dots(col = "Hawker",
             size = 0.01,
          
             border.col = "black",
             border.lwd = 0.5) +
  # tm_symbols(shape = "",
  #            title.shape = "Type:",
  #            shapes.labels = c("Cave entrance", "Peak", "Volcano")
  #            ) +
  tm_view(set.zoom.limits = c(11, 16))
```

## Plot LCLQ value with bubbles
```{r}
tmap_mode("view")

tm_shape(sg) +
  tm_polygons() +
  tm_shape(LCLQ_hawker) + 
  tm_bubbles(col = "Hawker", 
             size = "p_sim_Carpark",
             border.col = "black",
             border.lwd = 0.5) +
  tm_view(set.zoom.limits = c(11, 16))

```






```{r}
tmap_mode("view")

tm_shape(sg) +
  tm_polygons() +
  tm_shape(LCLQ_hawker) + 
  tm_bubbles(col = "Hawker", 
             size = "p_sim_Hawker",
             border.col = "black",
             border.lwd = 0.5) +
  tm_view(set.zoom.limits = c(11, 16))

```





